generator client {
  provider = "prisma-client-js"
  output   = "../src/libs/prisma/dist"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model applicants {
  id                     String            @id @db.Char(36)
  user_id                String            @db.Char(36)
  job_id                 String            @db.Char(36)
  status                 applicants_status @default(pending)
  cv                     String            @db.VarChar(255)
  national_identity_card String            @db.VarChar(255)
  created_at             DateTime?         @db.Timestamp(0)
  updated_at             DateTime?         @db.Timestamp(0)
  deleted_at             DateTime?         @db.Timestamp(0)
  job_posts              job_posts         @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "applicants_job_id_foreign")
  users                  users             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "applicants_user_id_foreign")
  selections             selections[]

  @@index([job_id], map: "applicants_job_id_foreign")
  @@index([user_id], map: "applicants_user_id_foreign")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model companies {
  id         String    @id @db.Char(36)
  name       String    @db.VarChar(255)
  email      String    @db.VarChar(255)
  phone      String    @db.VarChar(255)
  website    String    @db.VarChar(255)
  logo       String    @db.VarChar(255)
  address    String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model job_categories {
  id                       String                     @id @db.Char(36)
  name                     String                     @db.VarChar(255)
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @db.Timestamp(0)
  deleted_at               DateTime?                  @db.Timestamp(0)
  job_categories_job_posts job_categories_job_posts[]
}

model job_categories_job_posts {
  job_category_id String         @db.Char(36)
  job_post_id     String         @db.Char(36)
  job_categories  job_categories @relation(fields: [job_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "job_categories_job_posts_job_category_id_foreign")
  job_posts       job_posts      @relation(fields: [job_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "job_categories_job_posts_job_post_id_foreign")

  @@id([job_category_id, job_post_id])
  @@index([job_post_id], map: "job_categories_job_posts_job_post_id_foreign")
}

model job_posts {
  id                       String                     @id @db.Char(36)
  title                    String                     @db.VarChar(255)
  description              String                     @db.Text
  requirements             String                     @db.Text
  benefits                 String                     @db.Text
  type                     job_posts_type
  status                   job_posts_status           @default(active)
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @db.Timestamp(0)
  deleted_at               DateTime?                  @db.Timestamp(0)
  applicants               applicants[]
  job_categories_job_posts job_categories_job_posts[]
  selections               selections[]
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model selections {
  id           String            @id @db.Char(36)
  applicant_id String            @db.Char(36)
  job_id       String            @db.Char(36)
  stage        selections_stage
  status       selections_status @default(pending)
  attachment   String?           @db.VarChar(255)
  created_at   DateTime?         @db.Timestamp(0)
  updated_at   DateTime?         @db.Timestamp(0)
  deleted_at   DateTime?         @db.Timestamp(0)
  applicants   applicants        @relation(fields: [applicant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "selections_applicant_id_foreign")
  job_posts    job_posts         @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "selections_job_id_foreign")

  @@index([applicant_id], map: "selections_applicant_id_foreign")
  @@index([job_id], map: "selections_job_id_foreign")
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       String? @db.Char(36)
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model users {
  id          String       @id @db.Char(36)
  photo       String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  phone       String       @unique(map: "users_phone_unique") @db.VarChar(255)
  email       String       @unique(map: "users_email_unique") @db.VarChar(255)
  address     String?      @db.Text
  description String?      @db.Text
  password    String       @db.VarChar(255)
  role        users_role   @default(pelamar)
  verified_at DateTime?    @db.Timestamp(0)
  created_at  DateTime?    @db.Timestamp(0)
  updated_at  DateTime?    @db.Timestamp(0)
  deleted_at  DateTime?    @db.Timestamp(0)
  applicants  applicants[]
}

enum applicants_status {
  pending
  selection
  accepted
  rejected
}

enum selections_stage {
  portfolio
  interview
  medical_checkup
}

enum selections_status {
  pending
  in_review
  accepted
  rejected
}

enum job_posts_type {
  full_time
  part_time
  contract
  remote
}

enum job_posts_status {
  active
  inactive
}

enum users_role {
  pelamar
  admin
}
